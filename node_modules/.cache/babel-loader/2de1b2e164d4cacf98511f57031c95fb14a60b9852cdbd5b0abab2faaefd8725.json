{"ast":null,"code":"var _jsxFileName = \"E:\\\\Programming\\\\React\\\\MyProtfolio\\\\portfolio\\\\src\\\\ThemeContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/ThemeContext.js\nimport React, { createContext, useState, useContext, useEffect } from \"react\";\n\n// Create a context for the theme\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\n// ThemeProvider component that wraps the entire app\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [darkMode, setDarkMode] = useState(false);\n\n  // Toggle the theme mode\n  const toggleTheme = () => {\n    setDarkMode(!darkMode);\n  };\n\n  // Apply the theme class to the HTML element\n  useEffect(() => {\n    if (darkMode) {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, [darkMode]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      darkMode,\n      toggleTheme\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the theme context\n_s(ThemeProvider, \"n2P3coCVngntCnyS/Nqj+dgR7+U=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  return useContext(ThemeContext);\n};\n_s2(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","darkMode","setDarkMode","toggleTheme","document","documentElement","classList","add","remove","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","$RefreshReg$"],"sources":["E:/Programming/React/MyProtfolio/portfolio/src/ThemeContext.jsx"],"sourcesContent":["// src/ThemeContext.js\r\nimport React, { createContext, useState, useContext, useEffect } from \"react\";\r\n\r\n// Create a context for the theme\r\nconst ThemeContext = createContext();\r\n\r\n// ThemeProvider component that wraps the entire app\r\nexport const ThemeProvider = ({ children }) => {\r\n  const [darkMode, setDarkMode] = useState(false);\r\n\r\n  // Toggle the theme mode\r\n  const toggleTheme = () => {\r\n    setDarkMode(!darkMode);\r\n  };\r\n\r\n  // Apply the theme class to the HTML element\r\n  useEffect(() => {\r\n    if (darkMode) {\r\n      document.documentElement.classList.add(\"dark\");\r\n    } else {\r\n      document.documentElement.classList.remove(\"dark\");\r\n    }\r\n  }, [darkMode]);\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ darkMode, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the theme context\r\nexport const useTheme = () => useContext(ThemeContext);\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,gBAAGN,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMO,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAE/C;EACA,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACxBD,WAAW,CAAC,CAACD,QAAQ,CAAC;EACxB,CAAC;;EAED;EACAP,SAAS,CAAC,MAAM;IACd,IAAIO,QAAQ,EAAE;MACZG,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;IAChD,CAAC,MAAM;MACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;IACnD;EACF,CAAC,EAAE,CAACP,QAAQ,CAAC,CAAC;EAEd,oBACEL,OAAA,CAACC,YAAY,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAET,QAAQ;MAAEE;IAAY,CAAE;IAAAJ,QAAA,EACrDA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;;AAED;AAAAd,EAAA,CAxBaF,aAAa;AAAAiB,EAAA,GAAbjB,aAAa;AAyB1B,OAAO,MAAMkB,QAAQ,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMxB,UAAU,CAACI,YAAY,CAAC;AAAA;AAACoB,GAAA,CAA1CD,QAAQ;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}